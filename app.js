// Generated by CoffeeScript 1.4.0
(function() {
  var Db, Readability, RedisStore, Timer, Twitter, app, cfg, db, express, rdb, tw;

  express = require('express');

  cfg = require('./cfg/config.js');

  Twitter = (require('./lib/twitter.js')).Twitter;

  Readability = (require('./lib/readability.js')).Readability;

  Db = (require('./lib/db.js')).Db;

  Timer = (require('./lib/timer.js')).Timer;

  RedisStore = (require('connect-redis'))(express);

  app = express();

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express["static"](__dirname + '/static'));

  app.use(express.session({
    store: new RedisStore({
      'db': '1',
      maxAge: 1209600000
    }),
    secret: 'blahblahblah'
  }));

  /* Controllers
  */


  db = new Db(cfg);

  tw = new Twitter(cfg, db);

  rdb = new Readability(cfg, db);

  /* Routes
  */


  app.get('/', function(req, res) {
    var user_name;
    user_name = null;
    if (req.session.tw) {
      if (req.session.tw.user_name) {
        user_name = req.session.tw.user_name;
      }
    }
    return res.render('index', {
      "session": req.session,
      "user_name": user_name
    });
  });

  app.get('/timer/start', function(req, res) {
    var timer;
    timer = new Timer(req.session.tw.user_name, cfg, db, tw, rdb);
    return timer.startTimer(70000, function(error, callback) {});
  });

  app.get('/timer/stop', function(req, res) {
    var timer;
    timer = new Timer(req.session.tw.user_name, cfg, db, tw, rdb);
    return timer.startTimer('', function(error, callback) {});
  });

  app.get('/check', function(req, res) {
    checkTweets(req.session.tw.user_name);
    return res.redirect('/');
  });

  app.get('/status', function(req, res) {});

  app.get('/logout', function(req, res) {
    req.session.destroy();
    return res.redirect('/');
  });

  app.get('/tw', function(req, res) {
    return tw.getFavorites(req.session.tw.user_name, 20, function(callback) {
      return res.send(callback);
    });
  });

  app.get('/rdb', function(req, res) {
    return rdb.getBookmarks(req.session.tw.user_name, function(callback) {
      return res.send(callback);
    });
  });

  /* Readability Auth to retrieve access tokens, etc.
  */


  app.get('/tw/login', function(req, res) {
    return tw.login(function(callback) {
      if (!req.session.tw) {
        req.session.tw = {};
      }
      req.session.tw.oauth_token = callback.oauth_token;
      req.session.tw.oauth_token_secret = callback.oauth_token_secret;
      return res.redirect("https://api.twitter.com/oauth/authenticate?oauth_token=" + callback.oauth_token + "&oauth_token_secret=" + callback.oauth_token_secret);
    });
  });

  app.get('/tw/callback', function(req, res) {
    if (req.query.denied) {
      return res.redirect('/');
    } else {
      return tw.handleCallback(req.query.oauth_token, req.query.oauth_token_secret, req.query.oauth_verifier, function(error, callback) {
        req.session.tw.oauth_access_token = callback.oauth_access_token;
        req.session.tw.oauth_access_token_secret = callback.oauth_access_token_secre;
        req.session.tw.user_name = callback.user_name;
        req.session.tw.active = 1;
        return res.redirect('/');
      });
    }
  });

  /* Readability Auth to retrieve access tokens, etc.
  */


  app.get('/rdb/login', function(req, res) {
    return rdb.login(function(callback) {
      if (!req.session.rdb) {
        req.session.rdb = {};
      }
      req.session.rdb.oauth_token = callback.oauth_token;
      req.session.rdb.oauth_token_secret = callback.oauth_token_secret;
      return res.redirect("https://www.readability.com/api/rest/v1/oauth/authorize/?oauth_token=" + callback.oauth_token + "&oauth_token_secret=" + callback.oauth_token_secret);
    });
  });

  app.get('/rdb/callback', function(req, res) {
    return rdb.handleCallback(req.session.tw.user_name, req.query.oauth_token, req.session.rdb.oauth_token_secret, req.query.oauth_verifier, function(error, callback) {
      req.session.rdb.oauth_access_token = callback.oauth_access_token;
      req.session.rdb.oauth_access_token_secret = callback.oauth_access_token_secret;
      req.session.rdb.active = 1;
      return res.redirect('/');
    });
  });

  /* Start the App
  */


  app.listen("" + cfg.PORT);

}).call(this);
